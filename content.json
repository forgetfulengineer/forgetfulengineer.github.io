{"posts":[{"title":"【PHP】4種判斷變數或陣列是否存在的方法","text":"本篇重點 使用 empty()、is_null()、isset() 或是直接使用if ($variable) 判斷式來判斷變數或陣列是否存在 資料檢查甚麼時候會有錯誤訊息(php error) 在開發動態網頁時，後端程式扮演了一個重要的角色，可能會處理來自前端程式的資料，也有可能處理來自資料庫的資料，在這種情況下，我們必須嚴謹地檢查數據的完整性，以確保後續的程式能夠順暢運行。那麼有哪些函數能夠進行這樣的檢查？ 首先先了解各種類型的判斷，判斷的類型有 無效值(null) 布林值(boolean) 字串(string) 數值(integer) 陣列(array) 判斷差異表比較不同的function在各種情況下的判斷 型態 if ($x) empty() isset() is_null() $x = null null false true false true $x is undefined null false true false true $x = true boolean true false true false $x = false boolean false true true false $x = ‘’ string false true true false $x = ‘1’ string true false true false $x = ‘0’ string false true true false $x = ‘-1’ string true false true false $x = ‘hello’ string true false true false $x = ‘true’ string true false true false $x = ‘false’ string true false true false $x = 1 integer true false true false $x = 0 integer false true true false $x = -1 integer true false true false $x = 666 integer true false true false $x = array() array false true true false $x = array(‘a’, ‘b’) array true false true false if ($x) 和 empty() 的判斷結果相反 isset() 和 is_null() 的判斷結果相反 健忘筆記 螢光標記是我覺得特別要注意的判斷結果 範例 用戶填寫表格資料並送出資料，這些資料會從前端傳到後端程式，此時我們需要驗證是否有填入資料或是資料是否正確 php12345678&lt;?php// 使用 isset() 搭配 intval() 確認是否有參數傳入且為大於 0 的數值$age = isset($_POST['age']) &amp;&amp; intval($_POST['age']) &gt; 0 ? intval($_POST['age']) : 0;// 初步整理$age值後，檢查是否需要返回前端重新填寫$ageif ($age == 0) { // 返回前端請用戶重新填寫年齡} 情境一，填寫年齡 30 傳入後端，isset()為 true，且 intval() 後數值大於零，$age = 30 情境二，填寫年齡 0 傳入後端，isset()為 true，但 intval() 後數值等於零，$age = 0 情境三，無填寫年齡傳入後端，isset()為 false，$age = 0 健忘筆記 : ? 是條件運算符，稱為 三元運算符，可以用來做因果判斷 從資料庫撈取資料，並檢測是否有資料，如果為無資料需要做處理 情境一，從資料庫撈取會員資訊 $user_data (正確撈到會員資訊) php執行實例123456789101112131415&lt;?php$user_data = array( 'name' =&gt; '小名', 'gender' =&gt; 'Male',);// 使用 if ($user_data) 確認變數內是否有資料if (!$user_data) { // if ($user_data) 判斷為 true，但是碰到驚嘆號反轉布林值結果，因此為 false 跳過判斷 // 無資料時的處理}// 使用 is_array($user_data) 搭配 empty() 確認變數內是否有資料if (!is_array($user_data) || empty($user_data)) { // !is_array()為 false，empty() 也為 false，因此跳過判斷 // 無資料時的處理} 情境二，從資料庫撈取會員資訊，但無資料寫入空陣列 php執行實例123456789101112&lt;?php$user_data = array();// 使用 if ($user_data) 確認變數內是否有資料if (!$user_data) { // !if ($user_data) 判斷為 true 進入無資料處理 // 無資料時的處理}// 使用 is_array($user_data) 搭配 empty() 確認變數內是否有資料if (!is_array($user_data) || empty($user_data)) { // !is_array()為 false，但 empty() 為 true，因此進入無資料處理 // 無資料時的處理} 情境三，從資料庫撈取會員資訊，但無資料寫入字串 php執行實例12345678910&lt;?php$user_data = 'no_data';if (!$user_data) { // !if ($x) 判斷為 false 跳過判斷 // 無資料時的處理}if (!is_array($user_data) || empty($user_data)) { // !is_array()為 true，因此進入無資料處理 // 無資料時的處理} 健忘筆記 如果查找資料庫，沒有取得資料，是寫入 array 以外的型態，那使用 !is_array($x) 搭配 empty() 來檢查資料會是更謹慎的做法 動手做做看 資料檢查實作範例 錯誤訊息在進行資料完整性檢查時，要確保資料的完整性，但又不希望出現錯誤訊息，那麼應該採用哪種函數? 這四種驗證方式除了兩兩相反外，還有一個很重要的差異 “錯誤訊息” 也就是PHP error。當變數 $x 沒有被賦值時，使用 if ($x) 和 is_null($x) 會引發錯誤訊息，但使用 isset($x) 和 empty($x) 不會，不過這些錯誤屬於較輕微的 E_NOTICE 級別，所以在沒有開啟PHP的所有錯誤提示的情況下是不會對網頁造成影響，但還是應該盡量處理這些錯誤。 範例 情境一，判斷陣列中不存在的索引 php執行實例12345&lt;?php$a = [];var_dump($a[1]); // NULL，錯誤訊息 Notice: Undefined offset: 1var_dump(isset($a[1])); // bool(false)，無錯誤訊息 ▲ $a 設定為一個空陣列，卻指定不存在的索引1，因此在 if ($a[1]) 的情況下會出現錯誤訊息 情境二，判斷不存在的變數 php執行實例1234&lt;?php// $b 沒有被賦值var_dump(is_null($b)); // bool(true)，Notice: Undefined variable: b var_dump(empty($b)); // bool(true)，無錯誤訊息 ▲ $b 沒有被賦值，因此在 if (is_null($b)) 的情況下會出現錯誤訊息。 情境三，有個陣列內的值需要做處理，但這個值不一定存在，如果陣列內沒有值就不需要處理 php執行實例123456789101112131415161718192021222324&lt;?php// 如果$user內沒有'age'$user = array( 'name' =&gt; '小明');if ($user['age']) { $user['adult'] = ($user['age'] &gt;= 18) ? true : false;} // 出現錯誤訊息 Notice: Undefined index: age 並跳出判斷，'adult'沒有寫入資料// 為了不跳出錯誤訊息且正常判斷，可以改成!empty()if (!empty($user['age'])) { $user['adult'] = ($user['age'] &gt;= 18) ? true : false;} // 無錯誤訊息跳出判斷// 如果$user內有'age'$user = array( 'name' =&gt; '小明', 'age' =&gt; 10);if (!empty($user['age'])) { $user['adult'] = ($user['age'] &gt;= 18) ? true : false;} // $user['adult'] = false ▲ 判斷用戶是否成年，而 $user 內 ‘age’ 的值不一定存在，因此需要檢查 ‘age’ 是否存在再做處理 健忘筆記 在不確定資料內部狀況的情況下，可以使用 empty() 來讓錯誤訊息消失 動手做做看 錯誤訊息實作範例 結論依不同的需求，使用function 來判斷變數或陣列的完整性。 if ($x) 和 empty() 的判斷結果相反 isset() 和 is_null() 的判斷結果相反 無設定 $x 值的狀況下 if ($x) 和 is_null($x) 會跳錯誤訊息 isset($x) 和 empty($x) 則不會跳錯誤訊息 檢查完整性可以減少 bug 的發生，不用修 bug 就是開心😆～ 你平常會檢查變數或陣列的資料完整性嗎? 是用甚麼方法處理呢? 歡迎留言跟大家分享！ 參考資料 【官方文件】PHP類型比較表 延伸閱讀 【官方文件】資料類型的介紹 【官方文件】判斷式(if)介紹 【官方文件】布林值false的定義 【官方文件】PHP error 介紹","link":"/PHP/4-Ways-to-Check-If-a-Variable-or-Array-Exists/"}],"tags":[{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"debug","slug":"debug","link":"/tags/debug/"},{"name":"後端","slug":"後端","link":"/tags/%E5%BE%8C%E7%AB%AF/"},{"name":"統整","slug":"統整","link":"/tags/%E7%B5%B1%E6%95%B4/"}],"categories":[{"name":"PHP","slug":"PHP","link":"/categories/PHP/"}],"pages":[{"title":"404 - 網頁不存在","text":"這是一個不存在的頁面 抱歉，找不到你要的頁面 😢將在 5 秒後返回首頁。 let countTime = 5; function count() { document.getElementById('timeout').textContent = countTime; countTime -= 1; if (countTime === 0) { location.href = 'https://forgetfulengineer.github.io'; } setTimeout(() => { count(); }, 1000); } count();","link":"/404.html"}]}